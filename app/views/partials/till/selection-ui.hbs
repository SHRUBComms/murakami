

<div class="col-md-12 mx-auto" id="options"></div>

{{#ifCond mode '==' 'update-categories'}}

{{>till/stock/categories/manage/add}}

{{>till/stock/categories/manage/edit}}

{{>till/stock/categories/manage/move}}

{{>till/stock/categories/manage/remove}}

<style>
.custom-menu {
    padding: 0;
    list-style: none;
    display: none;
    z-index: 1000;
    position: absolute;
    overflow: hidden;
    border: 1px solid #CCC;
    white-space: nowrap;
    font-family: sans-serif;
    background: #FFF;
    color: #333;
    border-radius: 5px;
}

.custom-menu li {
    margin-left: 0;
    padding: 8px 12px;
    cursor: pointer;
}

.custom-menu li:hover {
    background-color: #DEF;
}
</style>



{{/ifCond}}

<script>

var categories = {}
categories.options = {{{json categories}}}
categories.parent = null

var globalCategory;

function updateOptions(path) {
  $("#options").html("");

  options = eval(path);

  {{#ifCond mode '==' 'update-categories'}}
    for (let i = 0; i < options.length; i++) {
      if (options[i].active == 0) {
        options.splice(i, 1);
      }
    }
  {{/ifCond}}

  var currentRow, option, optionDOMObject;

  for (let i = 0; i < options.length; i++) {

    option = options[i];
    if(option.active == 1){

      if(option.stockControl == 1){
    		if(!option.conditions || option.conditions.length == 0){
    			if(!option.stockInfo.quantity){
    				option.stockInfo.quantity = 0;
    			}
    		} else if(option.conditions.length == 1){
    			if(!option.stockInfo[option.conditions[0]]){
    				option.stockInfo[option.conditions[0]] = {quantity: 0};
    			}
    		} else {
    			option.conditions.forEach(function(condition){
    				if(!option.stockInfo[condition]){
    					option.stockInfo[condition] = {qauntity: 0}
    				}
    			})
    		}
    	}

      if (!option.value) {
        option.value = 0;
      }


      if ((i + 1) % 3 == 1) {
        currentRow = document.createElement("div");
        currentRow.className = "row";
        document.getElementById("options").appendChild(currentRow);
      }

      optionDOMObject = {
        parent: document.createElement("div"),
        text: document.createElement("p")
      };

      optionDOMObject.parent.id = path + "[" + i + "]";
      optionDOMObject.parent.className = "col-xs-5 col-sm-3 item-options itemBtn";

      {{#ifCond mode '==' 'manage-stock'}}
        if(!option.stockControl && (!option.children || option.children.length == 0)){
          optionDOMObject.parent.className += " option-disabled"
        }

      {{/ifCond}}

      if (option.children && option.children.length > 0) {
        optionDOMObject.parent.onclick = function() {
          updateOptions(path + "[" + i + "].children");
        };
      } else {
        {{#ifCond mode '==' "transaction"}}
          optionDOMObject.parent.onclick = function() {
            addToTransaction(options[i]);
          };
        {{else}}
          {{#ifCond mode '==' "manage-stock"}}
            if(!option.stockControl){
              optionDOMObject.parent.onclick = function() {};
            } else {
              optionDOMObject.parent.onclick = function() {
                addToTransaction(options[i]);
              };
            }

          {{ else }}
            optionDOMObject.parent.onclick = function() {
              openEditCategoryDialog(path + "[" + i + "]");
            };
          {{/ifCond}}
        {{/ifCond}}
      }

      optionDOMObject.text.className = "text-center";
      optionDOMObject.text.innerHTML = option.name;


      if(option.stockControl && option.stockInfo){
        optionDOMObject.text.innerHTML += "<br />";
        if(option.conditions.length > 0){
          option.conditions.forEach(function(condition, index){
            optionDOMObject.text.innerHTML += "<p class='text-muted' style='line-height: 1.5; font-size: 90%;'>" + _.startCase(condition) + " Qty.: " + (option.stockInfo[condition].quantity || 0) + "</p>";
          })
        }

      }


      optionDOMObject.parent.appendChild(optionDOMObject.text);
      currentRow.appendChild(optionDOMObject.parent);
    }
  }

  var parentReal = false;
  var parent = path.split("[")
  var current = path;
  var row;
  if(parent.length > 1){
    parent.pop();
    parentReal = true;
    parent = parent.join("[");
  } else {
    parent = "categories.options"
  }

  {{#ifCond mode '==' 'update-categories'}}

    row = document.createElement("div");
    row.className = "row";

    var optionDOMObject = {
      parent: document.createElement("div"),
      text: document.createElement("p")
    };

    optionDOMObject.parent.className = "col-sm-3 item-options new-category-option";
    optionDOMObject.parent.onclick = function() {
      openAddCategoryDialog(current)
    };

    optionDOMObject.text.className = "text-center";
    optionDOMObject.text.textContent = "New Category";

    optionDOMObject.parent.appendChild(optionDOMObject.text);
    row.appendChild(optionDOMObject.parent);
    document.getElementById("options").appendChild(row);


  {{/ifCond}}

  if (parentReal) {

    row = document.createElement("div");
    row.className = "row";

    var optionDOMObject = {
      parent: document.createElement("div"),
      text: document.createElement("p")
    };

    optionDOMObject.parent.className = "col-sm-3 item-options";
    optionDOMObject.parent.onclick = function() {
      updateOptions(parent);
    };

    optionDOMObject.text.className = "text-center";
    optionDOMObject.text.textContent = "‚Üê Back";

    optionDOMObject.parent.appendChild(optionDOMObject.text);
    row.appendChild(optionDOMObject.parent);
    document.getElementById("options").appendChild(row);
  }
}


{{#ifCond mode '==' 'update-categories'}}

  var contextMenuDOM = "<ul class='custom-menu'>" +
                          "<li data-action='add'>Add Child</li>" +
                          "<li data-action='edit'>Edit</li>" +
                          "<li data-action='move'>Move</li>" +
                          "<li data-action='remove' class='text-danger'>Remove</li>" +
                      "</ul>"

  $('body').append(contextMenuDOM)

  $(document).bind("contextmenu", function(event) {

    if ($(".itemBtn:hover").length != 0) {

      globalCategory = $(".itemBtn:hover").attr("id");
      event.preventDefault();

      $(".custom-menu")
        .finish()
        .toggle(100)
        .css({
          top: event.pageY + "px",
          left: event.pageX + "px"
        });
      }
  });

  // If the document is clicked somewhere
  $(document).bind("mousedown", function(e) {
    if ($(e.target).closest('.custom-menu').length === 0) {
      $(".custom-menu").hide(100);
    }
  });

  // If the menu element is clicked
  $(".custom-menu li").click(function() {
    // This is the triggered action name
    switch ($(this).attr("data-action")) {
      case "edit":
        openEditCategoryDialog(globalCategory);
        break;
      case "move":
        openMoveCategoryDialog(globalCategory);
        break;
      case "add":
        openAddCategoryDialog(globalCategory);
        break;
      case "remove":
        if(confirm("Are you sure you want to remove this category?")){ removeCategory(globalCategory); }
        break;
    }

    // Hide it AFTER the action was triggered
    $(".custom-menu").hide(100);
  });

  function selectCategory(e) {
    $(".member-selected").removeClass("member-selected")
    $(e).addClass("member-selected");
    $("#newParent").val(e.id);
  }

  function toggleFixedPrice(mode){

    if($("#" + mode + "CategoryFixedPriceCheck").is(":checked")){
      $("#" + mode + "CategoryFixedPriceContainer").removeClass("d-none");

    } else {
      $("#" + mode + "CategoryFixedPriceContainer").addClass("d-none");
      $("#" + mode + "CategoryValue").val("0.00");
    }
  }

  function toggleFixedWeight(mode){

    if($("#" + mode + "CategoryCarbonId").val()){
      $("#" + mode + "CategoryFixedWeightCheckWrapper").removeClass("d-none")
      if($("#" + mode + "CategoryFixedWeightCheck").is(":checked")){
        $("#" + mode + "CategoryFixedWeightContainer").removeClass("d-none")
      } else {
        $("#" + mode + "CategoryFixedWeightContainer").addClass("d-none")
      }
    } else {
      $("#" + mode + "CategoryFixedWeightContainer").addClass("d-none")
      $("#" + mode + "CategoryFixedWeightCheckWrapper").addClass("d-none")

    }

  }

  function toggleStockControl(mode){

    if($("#" + mode + "CategoryStockControlCheck").is(":checked")){
      $("#" + mode + "CategoryAvailableConditions").removeClass("d-none");
    } else {
      $("#" + mode + "CategoryAvailableConditions").addClass("d-none");
      $("#" + mode + "CategoryAvailableConditions").val([]);
    }

  }


{{/ifCond}}

function getCategories(path) {

  $.ajax({
    type: "GET",
    url: "{{public_address}}/api/get/tills/categories/{{{till.till_id}}}",
    success: function(response) {
      categories = {};
      categories.options = response;
      categories.parent = null;
      if (eval(path)) {
        updateOptions(path);
      } else {
        updateOptions("categories.options");
      }
    }
  });
}

updateOptions("categories.options");

{{#ifCond mode '==' 'manage-stock'}}
  window.setTimeout(function(){
    if($("#categories > tbody").children().length == 0){
      $("#noStockOptions").removeClass("d-none");
    }
  }, 100)

{{/ifCond}}

</script>
