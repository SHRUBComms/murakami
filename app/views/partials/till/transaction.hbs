<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<script src="{{public_address}}/assets/js/till-balance.js"></script>

<div class="row m-2 m-md-4 m-lg-4 m-xl-4">

		<div class="card">
			<div class="card-body">
				<h3 class="mb-0">{{till.name}} <span class="text-success">&#9679;</span></h3>
				<p id="tillBalanceWrapper" class="d-none text-muted">Till Balance: <b>£<span id="tillBalance"></span></b></p>
			</div>
		</div>

</div>


<div class="modal fade" id="transactionSuccessModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div id="transactionSuccess" class="modal-body alert-success p-4">
				<h4 class="alert-heading">Transaction Successful!</h4>
				<p id="transactionSuccessSummary"></p>
				<hr />
				<p id="transactionSuccessCarbon"></p>
      </div>
			<div class="modal-body col-md-12">

				<p id="receiptSummaryPreamble" class="mb-3 font-weight-bold">For paper receipts, write down the following summary:</p>
				<div id="receiptSummary"></div>

			</div>
			<div id="emailReceiptInputWrapper" class="modal-body pt-0 col-md-12 d-none">
				<div class="input-group">
					<input id="emailReceiptInput" type="text" class="form-control" placeholder="Customer's Email Address" />
					<div class="input-group-btn">
						<button id="emailReceiptInputSubmit" class="btn btn-primary form-control">Send Receipt</button>
					</div>
				</div>

					<div class="form-check mx-1 mt-3">
						<input type="checkbox" class="form-check-input" id="receiptEmailConsentCheck">
						<label class="form-check-label" for="receiptEmailConsentCheck">Customer has consented to one time use of their email address for the sole purpose of sending this receipt. </label>
					</div>

			</div>

      <div class="modal-footer">
				<a id="emailReceiptButton" class="btn btn-success">Email Receipt</a>
				<!--<a id="printReceiptButton" class="btn btn-primary" target="_blank">Print Receipt</a>-->
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="transactionFailModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div id="transactionFail" class="modal-body alert-danger p-4">
				<h4 class="alert-heading">Transaction Failed!</h4>
				<p class="alert-heading" id="transactionFailSummary"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>


<div class="row mt-4 mb-3">
		<div class="col-md-3 ml-2 ml-md-4 ml-lg-4 ml-xl-4">

			<input type="hidden" id="member_id" value="{{member.id.text}}" />

			<input type="checkbox" id="memberToggle" data-toggle="toggle" data-on="Customer Is A Member" data-off="Customer Is Not A Member">

			<div class="d-none" id="memberOptions">

			  <input type="text" class="form-control mt-3" id="memberInput" oninput="searchMember(function(){})" value="" placeholder="Type member's name or scan barcode">

			</div>
		</div>

</div>

<div class="row mt-3" id="searchResults"></div>

<div class="row mt-4 h-100">
	<div class="col-lg-6 mx-auto">

				{{>till/selection-ui mode="transaction"}}

	</div>



	<div class="col-12 col-md-6 col-lg-5 col-xl-5 mx-auto mt-4 mt-lg-0 mt-xl-0" id="transaction-list">
				<table class="table table-light table-striped">
				  <thead>
				    <tr>
				      <th scope="col" width="30%">Category</th>
				      <th scope="col">Value</th>
				      <th scope="col">Weight (g)</th>
							<th scope="col">Qty.</th>
				      <th scope="col"></th>
				    </tr>
				  </thead>
				  <tbody id="transaction-info">

				  </tbody>
				</table>
	</div>
</div>

<div class="row mt-4 mb-4">
	<div class="col-12 col-md-8 col-lg-6 col-xl-4 mx-auto">
		<div id="transaction_btns" class="d-none">
			<button type="button" class="btn btn-success btn-block btn-lg" data-toggle="modal" data-target="#myModal"><span class="transaction-total"></span></button>
		</div>
	</div>
</div>

<div id="myModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
			<div class="modal-header">
        <h5 class="modal-title">Transaction Summary</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
				<div class="row">
          <div class="col-10 col-md-8 col-lg-8 col-xl-8 mx-auto">
	      		<center>
		      		<h4 class="transaction-total"></h4>
		      		<p id="memberStatement"></p>
		      		<br />
		      		<div class="form-group d-none" id="selectPaymentMethod">
		      			<button class="btn btn-primary btn-lg form-inline" id="cashOption" onclick="selectPaymentMethod('cash')">Cash</button>
		      			&nbsp;
		      			<button class="btn btn-primary btn-lg form-inline" id="cardOption" onclick="selectPaymentMethod('card')">Card</button>
		      		</div>
							<small id="minimumCardTransaction" class="d-none">To pay with card, please spend a minimum of £1.00.</small>
					</center>
					<br />
				</div>
				</div>
				<div class="row">
					<div class="col-xs-10 col-md-6 col-md-offset-3 col-xs-offset-1 d-none mx-auto" id="changeCalc">
		    		<div class="input-group">
		            <span class="input-group-prepend">
									<span class="input-group-text" id="basic-addon1">Cash Given £</span>
								</span>
		            <input class="form-inline form-control" oninput="calculateChange(this)" type="text" placeholder="0.00" />
		    		</div>
		    		<br />
		    		<div class="input-group">
		            <span class="input-group-prepend">
									<span class="input-group-text" id="basic-addon1">Change Due £</span>
								</span>
		            <input class="form-inline form-control" id="change" type="text" placeholder="0.00" readonly />
		    		</div>
		    		<br />
		    	</div>
		  	</div>

				<div class="row">
					<div class="col-md-8 mx-auto">
						<textarea id="note" placeholder="Note (optional)" class="form-control"></textarea>
					</div>
				</div>

				<div class="row">
					<div class="conatiner mx-auto">
						<div class="form-check form-check-inline mt-2">
							<input class="form-check-input" type="checkbox" id="confirmTransaction">
							<label class="form-check-label">Transaction details are correct</label>
						</div>
					</div>
				</div>

      </div>
      <div class="modal-footer">
      	<button type="button" id="confirmTransactionBtn" class="btn btn-success" data-dismiss="modal" onclick="completeTransaction()" disabled="disabled">Complete Transaction</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>


<div id="itemConditionModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
			<div class="modal-header">
        <h5 class="modal-title">Item Condition</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
				<div class="row">

					<div class="col-md-12">

						<div class="p-4">

							<h5 class="mb-1">Please select the condition of "<span id="itemConditionName" class="text-weight-bold"></span>"</h5>

							<div id="availableItemConditions"></div>

						</div>
					</div>
				</div>

      </div>
      <div class="modal-footer">
      	<button type="button" id="addItemConditionToTrans" class="btn btn-success" data-dismiss="modal">Add To Transaction</button>
        <button type="button" class="btn btn-danger" onclick="" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>


<div id="membershipWarning" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
			<div class="modal-header">
        <h5 class="modal-title">Membership Warning</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
				<div class="row">

					<div class="col-md-12">

						<div class="p-4">

							<p class="mb-2">If you're trying to add a member <b>please go to the add member page</b>!</p>

							<p>Once you have processed the new member's information, you'll be brought back to this page where they'll be prompted to pay for their membership.</p>


						</div>
					</div>
				</div>

      </div>
      <div class="modal-footer">
				<button type="button" class="btn btn-success" onclick="location.href='{{public_address}}/members/add?till_id={{till.till_id}}'">Goto Add Member Page</button>
				<button type="button" id="addItemConditionToTrans" class="btn btn-primary" data-dismiss="modal">Add To Transaction</button>
      </div>
    </div>

  </div>
</div>





{{#if diode_api_key}}
	{{>till/electrical-safety}}
{{/if}}

<script>

getRunningBalance("{{public_address}}", "{{till.till_id}}");

var transaction = [];

var tokens_total = 0;
var weight_total = 0;
var money_total = 0;
var global_money_total = 0;

var paymentMethod;

var itemToAdd = {};

var payWithTokens = false;
var results = [];
var member = {};


//if (navigator.appVersion.includes("Android") || navigator.appVersion.includes("Apple")){
    $("#cardOption").removeClass("d-none");
//} else {
//	$("#cardOption").addClass("d-none");
//}

var uri = window.location.toString();
if (uri.indexOf("?") > 0) {
    var clean_uri = uri.substring(0, uri.indexOf("?"));
    window.history.replaceState({}, document.title, clean_uri);
}

$('#isMemberCheck').on("click", function () {
		var checked = $('input', this).is(':checked');
		$('span', this).text(checked ? 'Customer Is A Member' : 'Customer Is Not A Member');
});


function addToTransaction(item){

	var sanitizedItem = {};
	sanitizedItem.id = item.item_id || item.id;
	sanitizedItem.name = item.name;
	sanitizedItem.absoluteName = item.absolute_name || item.absoluteName;
  sanitizedItem.discount = item.discount ? true : false;
	sanitizedItem.weight = item.weight || 0;
	sanitizedItem.conditions = item.conditions;
	sanitizedItem.condition = item.condition;
	sanitizedItem.action = item.action;
	sanitizedItem.quantity = item.quantity || 1;
	sanitizedItem.stockControl = item.stockControl || 0;
	sanitizedItem.stockInfo = item.stockInfo;
	sanitizedItem.allowTokens = item.allowTokens;
	sanitizedItem.carbon_id = item.carbon_id;
	sanitizedItem.member_discount = item.member_discount;

  // Restrict one global discount per transaction
  if(transaction.filter(function(existingItem) { return existingItem.discount == true; }).length > 0 && sanitizedItem.discount) {
    sanitizedItem = null;
    alert("You can only apply 1 whole transaction discount!");
  }

	if(item.value > 0){
		sanitizedItem.value = item.value;
		sanitizedItem.setValue = true;
	} else {
		sanitizedItem.value = 0;
		sanitizedItem.setValue = false;
	}

	if(Array.isArray(sanitizedItem.conditions)){
		if(sanitizedItem.conditions.length == 1){
			sanitizedItem.condition = sanitizedItem.conditions[0]
		}
	} else {
		sanitizedItem.condition = null;
	}


	if("{{diode_api_key}}"){
		if(sanitizedItem.carbon_id == "IT-101"){
			$("#electricalSafetyModal").modal("show");
			$("#removeUnsafe").attr("onclick", "removeFromTransaction(null)");
		}
	}

	try {
		if(sanitizedItem.action.substring(0,3) == "MEM" && !member.name){
			$("#membershipWarning").modal("show");
		}
	} catch(err){}

	if(!sanitizedItem.condition && Array.isArray(sanitizedItem.conditions)){
		if(sanitizedItem.conditions.length == 1) {
			sanitizedItem.condition = sanitizedItem.conditions[0];
			itemToAdd = {};
			transaction.push(sanitizedItem);
		} else if(sanitizedItem.conditions.length > 0){
			$('input[name="itemCondition"]:radio').prop('checked', false);
			$("#addItemConditionToTrans").attr("onclick", "return false;");
			$("#itemConditionName").text(sanitizedItem.name);
			$("#availableItemConditions").html("");
			sanitizedItem.conditions.forEach(function(condition, index){
				var formWrapper = document.createElement("div");
				formWrapper.className = "form-check";

				var formLabel = document.createElement("label");
				formLabel.className = "form-check-label";

				var formInput = document.createElement("input");
				formInput.type = "radio";
				formInput.className = "form-check-input";
				formInput.name = "itemCondition";
				formInput.value = condition;

				var labelText = document.createElement("span");
				labelText.textContent = _.startCase(condition);

				formLabel.appendChild(formInput);
				formLabel.append(labelText)
				formWrapper.appendChild(formLabel);

				$("#availableItemConditions").append(formWrapper);

			})

			$('input[name="itemCondition"]:radio').change(function(){


				let condition = this.value;


				if(itemToAdd){
					itemToAdd.condition = condition
					document.getElementById("addItemConditionToTrans").onclick = function(){
						addToTransaction(itemToAdd)
					}
				}
			});

			$('#itemConditionModal').modal('show');
			itemToAdd = sanitizedItem;

		} else {
			itemToAdd = {};
			sanitizedItem.condition = ""
			transaction.push(sanitizedItem);
		}

	} else {

		itemToAdd = {};
		transaction.push(sanitizedItem);

	}

	updateTransactionList();

}

function removeFromTransaction(index){

	transaction.splice(index, 1);

	updateTransactionList();
}

function calculateChange(e){
	let cashGiven = parseFloat(e.value);
	let change = 0;


	if(isNumeric(cashGiven)){
		if(cashGiven > global_money_total){
			change = cashGiven - global_money_total;

		}
	}
	$("#change").val(change.toFixed(2));
}

function updateTransactionList(){
	$("#transaction-info").html("");
	var tokens_total = 0;
	var weight_total = 0;
  var discounts = [];
	var row, categoryColumn, quantityColumn, valueColumn, weightColumn, deleteColumn;

	for(let i = 0; i < transaction.length; i++){
		
    var value = 0;
		var note = "(";

		if (transaction[i].condition){
			note += _.startCase(transaction[i].condition)
		}

    if(transaction[i].discount === false) {
      if(member.name){
        value = +transaction[i].value
        tokens_total += +value;
        if(transaction[i].member_discount > 0){
          if(note.length > 0){
            note += ", "
          }
          note += "<span class='fail'>-" + transaction[i].member_discount + "%</span>";
        }
      } else {
        value = +transaction[i].value;
        tokens_total += +transaction[i].value;
      }
    }

		note += ")"

		if(note == "()"){
			note = "";
		}

		weight_total += +transaction[i].weight;

		row = document.createElement("tr");

		categoryColumn = document.createElement("td");
		categoryColumn.className = "align-middle"
		categoryColumn.innerHTML = transaction[i].absoluteName + " " + note;

		quantityColumn = document.createElement("td");
		quantityColumn.className = "align-middle"
    
    if(transaction[i].action == null && transaction[i].discount == false){
      var quantityColumnInput = document.createElement("input");

      let maxQuantity;
      try {
        maxQuantity = transaction[i].stockInfo[transaction[i].condition].quantity;
      } catch(err){
        maxQuantity = null;
      }

      quantityColumnInput.id = "quantity_" + i;
      quantityColumnInput.type = "number";
      quantityColumnInput.value = transaction[i].quantity;
      quantityColumnInput.className = "form-control align-middle"
      quantityColumnInput.setAttribute("step", 1)
      quantityColumnInput.setAttribute("max", maxQuantity || 999);
      quantityColumnInput.setAttribute("min", 1)

      quantityColumnInput.oninput = function(){
        updateTransaction(i)
      };

      quantityColumnInput.onblur = function(){
        updateTransaction(i)
      };

      quantityColumn.append(quantityColumnInput)
		} else {
			quantityColumn.innerText = "-";
		}

		valueColumn = document.createElement("td");
		valueColumn.className = "align-middle"
		valueColumn.id = "value_" + i;
		
    valueColumn.oninput = function(){
			updateTransaction(i)
		};
    
		valueColumn.onblur = function(){
			updateTransaction(i)
		};

    if(transaction[i].discount == true) {
      valueColumn.innerHTML = "<span style='color: #1986e6;'>" + transaction[i].value + "% discount!</span>";
    } else {
		  valueColumn.textContent = transaction[i].value;
    }

		if(transaction[i].setValue == false || transaction[i].discount == false){
			valueColumn.contentEditable = true;
		}

		weightColumn = document.createElement("td");
		weightColumn.className = "align-middle"
		weightColumn.id = "weight_" + i;
		weightColumn.oninput = function(){
			updateTransaction(i)
		};
		weightColumn.onblur = function(){
			updateTransaction(i)
		};

		if(transaction[i].carbon_id != "" && transaction[i].discount == false){
			weightColumn.contentEditable = true;
			weightColumn.textContent = transaction[i].weight || 0;
		} else {
			weightColumn.textContent = "-";
		}

		removeColumn = document.createElement("td");
		removeColumn.className = "remove-item clickable align-middle"
		removeColumn.textContent = "x"
		removeColumn.onclick = function(){
			removeFromTransaction(i)
		}

		row.appendChild(categoryColumn)
		row.appendChild(valueColumn)
		row.appendChild(weightColumn)
		row.appendChild(quantityColumn)
		row.appendChild(removeColumn)

		document.getElementById("transaction-info").appendChild(row);

	}

	if(transaction.length > 0){
		$('<tr>',{
		    html:"<td><b>TOTAL:</b></td>" +
		    "<td id='tokens_total'>" + tokens_total + "</td>" +
		    "<td id='weight_total'>" + weight_total + "</td>" +
		    "<td></td>" +
				"<td></td>"
		}).appendTo('#transaction-info');
	}

	updateButtons();

}

function updateButtons(){
	tokens_total = 0;
	weight_total = 0;
	money_total = 0;
  total_discount = 0;
  contains_real_items = false;

	for(let i=0; i < transaction.length; i++){
    if(transaction[i].discount === true) {
      total_discount = transaction[i].value;
    } else {
      contains_real_items = true;
      if(transaction[i].allowTokens == 1){
        if(member.name){
          tokens_total += +((transaction[i].value * transaction[i].quantity) - ((transaction[i].value * transaction[i].quantity) * (transaction[i].member_discount/100)));
        } else {
          tokens_total += +(transaction[i].value * transaction[i].quantity);
        }
      } else {
        if(member.name){
          money_total += +((transaction[i].value * transaction[i].quantity) - ((transaction[i].value * transaction[i].quantity) * (transaction[i].member_discount/100)));
        } else {
          money_total += +(transaction[i].value * transaction[i].quantity);
        }
      }
      weight_total += +(transaction[i].weight * transaction[i].quantity);
    }
	}

  tokens_total -= tokens_total * (total_discount / 100);
  money_total -= money_total * (total_discount / 100);

	$("#value_total").html((tokens_total + money_total).toFixed(2));
	$("#weight_total").html(weight_total.toFixed(0));

	if(transaction.length > 0 && contains_real_items){
		$("#tokens_total").text((+money_total + +tokens_total).toFixed(2));
		$("#changeCalc").addClass("d-none");
		if(money_total == 0 && tokens_total == 0){
			$("#selectPaymentMethod").addClass("d-none");
			$(".transaction-total").html("Pay <b>nothing</b>!")

		} else if(member.name && payWithTokens){
			if(money_total == 0){
				if(member.balance >= tokens_total){
					$("#selectPaymentMethod").addClass("d-none");
					if(tokens_total == 1){
						$(".transaction-total").html("Pay <b>" + Math.ceil(tokens_total) + " token</b>")
					} else {
						$(".transaction-total").html("Pay <b>" + Math.ceil(tokens_total) + " tokens</b>")
					}

				} else {

					let difference = tokens_total - member.balance;
					$(".transaction-total").html("Pay <b>£" + (difference).toFixed(2) + "</b> and <b>" + (tokens_total - difference) +  " tokens</b>")
					$("#selectPaymentMethod").removeClass("d-none");
					global_money_total = (difference).toFixed(2);
				}
			} else {

				let difference = member.balance - tokens_total;
				var money = 0;
				var tokens = 0;

				if((member.balance - tokens_total) >= 0){
					tokens = tokens_total;
					money = money_total;
				} else {
					tokens = member.balance;
					money = +money_total + Math.abs(member.balance - tokens_total);
				}

				$(".transaction-total").html("Pay <b>£" + (money).toFixed(2) + "</b> and <b>" + Math.ceil(tokens) +  " tokens</b>")
				$("#selectPaymentMethod").removeClass("d-none");
				global_money_total = (money).toFixed(2);
			}
		} else {
			$(".transaction-total").html("Pay <b>£" + (tokens_total + money_total).toFixed(2) + "</b>");
			$("#selectPaymentMethod").removeClass("d-none");
			global_money_total = tokens_total + money_total;
		}


		$("#transaction_btns").removeClass("d-none");


		if(global_money_total < 1){

			$("#cardOption").prop("disabled", true)
			$("#minimumCardTransaction").removeClass("d-none");
		} else {
			$("#cardOption").prop("disabled", false)
			$("#minimumCardTransaction").addClass("d-none");
		}

	} else {
		$("#transaction_btns").addClass("d-none");
	}

}

function isNumericAndWhole(n) {
  return !isNaN(parseFloat(n)) && n >= 0 && n % 1 == 0;
}

function isNumeric(n) {
	return !isNaN(parseFloat(n)) && n >= 0;
}

function updateTransaction(index){

	if(isNumeric($("#weight_" + index).html())){
		transaction[index].weight = $("#weight_" + index).html();
	} else {
		if(transaction[index].carbon_id){
			$("#weight_" + index).html("0");
			transaction[index].weight = 0;
		} else {
			$("#weight_" + index).html("-");
			transaction[index].weight = 0;
		}

	}

	if(isNumeric($("#value_" + index).text())){
		transaction[index].value = $("#value_" + index).html();
	} else {
		$("#value_" + index).html("");
		transaction[index].value = 0;
	}

	if(isNumericAndWhole($("#quantity_" + index).val())){
		transaction[index].quantity = $("#quantity_" + index).val();
	} else {
		$("#quantity_" + index).val(1);
		transaction[index].quantity = 1;
	}

	if(transaction.length > 0){

		var tokens_total = 0;
		var weight_total = 0;

	}

	updateButtons();

}

function searchMember(callback){
  $.ajax({
      type: "POST",
      url: "{{public_address}}/api/post/members/search/simple",
      data: {
          'term': $('#memberInput').val()
      },
      success: function(response){

        if(response.status == "ok"){
        	results = response.results;
          updateSearchResults(callback);
        }
      }
  });
}

function updateSearchResults(callback){
	member = {};
	$("#searchResults").html("");
	for(let i=0; i<results.length; i++){

		var memberMarkup = {}

		memberMarkup.column = document.createElement("div")
		memberMarkup.column.className = "col-md-3 mx-auto member-result";

		memberMarkup.card = document.createElement("div")
		memberMarkup.card.className = "card";

		memberMarkup.cardBody = document.createElement("div")
		memberMarkup.cardBody.className = "card-body";

		memberMarkup.name = document.createElement("p")
		memberMarkup.name.className = "mb-2";
		memberMarkup.name.innerHTML = "<b>" + results[i].name + "</b> (<a href='{{public_address}}/members/view/" + results[i].id + "?till_id={{till.till_id}}' target='_blank'>view profile</a>)"

		memberMarkup.balance = document.createElement("p")
		memberMarkup.balance.className = "mb-2";
		memberMarkup.balance.textContent = results[i].balance + " tokens";

		memberMarkup.membershipDates = document.createElement("p")
		if(results[i].requiresAddress){
			memberMarkup.membershipDates.className = "mb-2";
		} else {
			memberMarkup.membershipDates.className = "mb-3";
		}

		if(results[i].membership_type == "unpaid") {
			memberMarkup.membershipDates.className += " text-danger font-weight-bold";
			memberMarkup.membershipDates.textContent = "Unpaid!";
		} else {

			memberMarkup.membershipDates.textContent = "Membership expires: " + moment(results[i].membership_expires).format("L");
		}

		if(results[i].requiresAddress){
			memberMarkup.addressUpdate = document.createElement("p")
			memberMarkup.addressUpdate.className = "mb-3 font-weight-bold text-center"
			memberMarkup.addressUpdate.innerHTML = "No address on record!<br /><a href='{{public_address}}/members/update/" + results[i].id + "?till_id={{till.till_id}}' target='_blank'>Add address</a>"
		}


		memberMarkup.selectMember = document.createElement("a")
		memberMarkup.selectMember.className = "btn btn-primary btn-block";
		memberMarkup.selectMember.textContent = "Select Member";
		memberMarkup.selectMember.onclick = function(){
			selectMember(i)
		}

		memberMarkup.cardBody.appendChild(memberMarkup.name)

		if(results[i].is_member == true){
			memberMarkup.cardBody.appendChild(memberMarkup.balance);
			memberMarkup.cardBody.appendChild(memberMarkup.membershipDates);
			if(memberMarkup.addressUpdate){
				memberMarkup.cardBody.appendChild(memberMarkup.addressUpdate);
			}
			memberMarkup.cardBody.appendChild(memberMarkup.selectMember);
		} else {
			memberMarkup.membershipDates.textContent = "Membership expired!"
			memberMarkup.membershipDates.className = "mb-3"
			memberMarkup.cardBody.appendChild(memberMarkup.membershipDates);
			if(memberMarkup.addressUpdate){
				memberMarkup.cardBody.appendChild(memberMarkup.addressUpdate);
			}
			memberMarkup.cardBody.appendChild(memberMarkup.selectMember);
		}

		memberMarkup.card.appendChild(memberMarkup.cardBody);
		memberMarkup.column.appendChild(memberMarkup.card);



		document.getElementById("searchResults").appendChild(memberMarkup.column)

		callback();

	}
}

function selectMember(index){

	$("#searchResults").html("")

	member = results[index];

	var selectedMemberMarkup = {}

	selectedMemberMarkup.column = document.createElement("div")
	selectedMemberMarkup.column.className = "col-md-3 mb-4 mx-auto member-result";

	selectedMemberMarkup.card = document.createElement("div")
	selectedMemberMarkup.card.className = "card member-selected";

	selectedMemberMarkup.cardBody = document.createElement("div")
	selectedMemberMarkup.cardBody.className = "card-body";

	selectedMemberMarkup.name = document.createElement("p")
	selectedMemberMarkup.name.className = "mb-2";
	selectedMemberMarkup.name.innerHTML = "<b>" + member.name + "</b> (<a href='{{public_address}}/members/view/" + member.id + "?till_id={{till.till_id}}' target='_blank'>view profile</a>)"

	selectedMemberMarkup.balance = document.createElement("p")
	selectedMemberMarkup.balance.className = "mb-2";
	selectedMemberMarkup.balance.textContent = member.balance + " tokens";

	selectedMemberMarkup.membershipDates = document.createElement("p")
	selectedMemberMarkup.membershipDates.className = "mb-2";


	if(member.membership_type == "unpaid") {
		selectedMemberMarkup.membershipDates.className += " text-danger font-weight-bold";
		selectedMemberMarkup.membershipDates.textContent = "Unpaid!";
	} else {
		selectedMemberMarkup.membershipDates.textContent = "Membership expires: " + moment(member.membership_expires).format("L");
	}

	selectedMemberMarkup.payWithTokens = document.createElement("p")
	selectedMemberMarkup.payWithTokens.className = "mb-2";

	selectedMemberMarkup.payWithTokensText = document.createTextNode(' Pay With Tokens')

	selectedMemberMarkup.payWithTokensCheckbox = document.createElement("input")
	selectedMemberMarkup.payWithTokensCheckbox.type = "checkbox";
	selectedMemberMarkup.payWithTokensCheckbox.id = "payWithTokens";
	selectedMemberMarkup.payWithTokens.appendChild(selectedMemberMarkup.payWithTokensCheckbox);
	selectedMemberMarkup.payWithTokens.appendChild(selectedMemberMarkup.payWithTokensText);

	if(member.requiresAddress){
		selectedMemberMarkup.addressUpdate = document.createElement("p")
		selectedMemberMarkup.addressUpdate.className = "mb-2 font-weight-bold text-center"
		selectedMemberMarkup.addressUpdate.innerHTML = "No address on record!<br /><a href='{{public_address}}/members/update/" + member.id + "?till_id={{till.till_id}}' target='_blank'>Add address</a>"
	}

	selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.name)

	if(member.is_member == true){
		selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.balance);
		selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.payWithTokens);
		selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.membershipDates);
		if(member.requiresAddress){
			selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.addressUpdate)
		}
	} else {
		selectedMemberMarkup.card.className = "card member-result member-selected-expired";
		selectedMemberMarkup.balance.textContent += " (unavailable)"
		selectedMemberMarkup.membershipDates.textContent = "Membership expired!"

		selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.balance);
		selectedMemberMarkup.cardBody.appendChild(selectedMemberMarkup.membershipDates);

		member.balance = 0;
	}

	selectedMemberMarkup.card.appendChild(selectedMemberMarkup.cardBody);
	selectedMemberMarkup.column.appendChild(selectedMemberMarkup.card);



	document.getElementById("searchResults").appendChild(selectedMemberMarkup.column)


	$("#payWithTokens").change(function(){

		if(this.checked) {
			payWithTokens = true;
		} else {
			payWithTokens = false;
		}
		updateButtons();
	})

	updateTransactionList();
	$("#memberStatement").html("Member selected: <b>" + member.name + "</b>");
	updateButtons();
}

function completeTransaction(type){
	let member_id = member.id || null;
    $.ajax({
        type: "POST",
        url: "{{public_address}}/till/transaction",
        data: {
        	'member_id': member.id,
        	'till_id': "{{till.till_id}}",
        	'paymentMethod': paymentMethod,
            'transaction': transaction,
            'payWithTokens': payWithTokens,
            'note': $("#note").val()
        },
        success: function(response){

        	$("#confirmTransaction").prop("checked", false)
        	$("#confirmTransactionBtn").prop("disabled", true)
        	selectPaymentMethod("clear");

        	if(response.status == "ok"){
						getRunningBalance("{{public_address}}", "{{till.till_id}}");
        		$("#note").val("")
	            transaction = [];
	            updateTransactionList();
	            payWithTokens = false;

							updateResponse("success", response.transactionSummary, response.carbonSummary, member, response.transaction_id)

							updateReceipt(response.transaction_id || "{{murakamiTransactionId}}");

	            if(member.name){

		            $("#memberToggle").prop("checked", true)
							  toggleIsMember({checked: true})
							  $("#memberInput").val(member.id)
							  searchMember(function(){
							    selectMember(0)
							  });
		        	}

							window.setTimeout(function(){
								$("#transaction_history").bootstrapTable('refresh');
							}, 750)

					} else if(response.status == "redirect") {
						window.location.href = response.url;
	        } else {
						updateResponse("fail", response.msg)
	        }
        }
    });
}

function updateReceipt(transaction_id){
  $.ajax({
      type: "POST",
      url: "{{public_address}}/till/refunds/issue",
      data: {
        'tillId': "{{till.till_id}}",
        'transactionId': transaction_id,
				'refundType': "murakami",
				'action': 'lookup'
      },
      success: function(response){
				// Create transaction dialog.
				var lookupSuccessMessage = document.getElementById("receiptSummary");
				lookupSuccessMessage.innerHTML = "";

				if(response.status == "ok"){

					$("#receiptSummaryPreamble").removeClass("d-none");

					var summaryTable = document.createElement("table")
					summaryTable.className = "table table-striped mb-0";

					// Transaction ID.
					var transactionIdRow = document.createElement("tr");
					var transactionIdNameCell = document.createElement("td");
					var transactionIdValueCell = document.createElement("td");
					transactionIdNameCell.innerHTML = "Murakami Transaction ID";
					transactionIdValueCell.textContent = response.transaction.transaction_id;
					transactionIdRow.appendChild(transactionIdNameCell);
					transactionIdRow.appendChild(transactionIdValueCell);

					// Timestamp
					var timestampRow = document.createElement("tr");
					var timestampNameCell = document.createElement("td");
					var timestampValueCell = document.createElement("td");
					timestampNameCell.innerHTML = "Timestamp";
					timestampValueCell.textContent = response.transaction.date;
					timestampRow.appendChild(timestampNameCell);
					timestampRow.appendChild(timestampValueCell);

					// Customer
					var customerRow = document.createElement("tr");
					var customerNameCell = document.createElement("td");
					var customerValueCell = document.createElement("td");
					customerNameCell.innerHTML = "Customer";
					customerValueCell.innerHTML = response.transaction.customer.name;
					customerRow.appendChild(customerNameCell);
					customerRow.appendChild(customerValueCell);

					// Bill
					var billRow = document.createElement("tr");
					var billNameCell = document.createElement("td");
					var billValueCell = document.createElement("td");
					billNameCell.innerHTML = "Bill";
					billValueCell.innerHTML = response.transaction.bill;
					billRow.appendChild(billNameCell);
					billRow.appendChild(billValueCell);

					// Money Total
					var moneyTotalRow = document.createElement("tr");
					var moneyTotalNameCell = document.createElement("td");
					var moneyTotalValueCell = document.createElement("td");
					moneyTotalNameCell.innerHTML = "Money Total";
					moneyTotalValueCell.textContent = response.transaction.totals.money;
					moneyTotalRow.appendChild(moneyTotalNameCell);
					moneyTotalRow.appendChild(moneyTotalValueCell);

					// Tokens Total
					var tokensTotalRow = document.createElement("tr");
					var tokensTotalNameCell = document.createElement("td");
					var tokensTotalValueCell = document.createElement("td");
					tokensTotalNameCell.innerHTML = "Tokens Total";
					tokensTotalValueCell.textContent = response.transaction.totals.tokens;
					tokensTotalRow.appendChild(tokensTotalNameCell);
					tokensTotalRow.appendChild(tokensTotalValueCell);

					// Append table children.
					summaryTable.appendChild(transactionIdRow);
					summaryTable.appendChild(timestampRow)
					summaryTable.appendChild(customerRow)
					summaryTable.appendChild(billRow)
					summaryTable.appendChild(moneyTotalRow)
					summaryTable.appendChild(tokensTotalRow)

					// Append to parents.
					lookupSuccessMessage.appendChild(summaryTable);

          lookupSuccessMessage.classList.remove("d-none");
				} else {
					$("#receiptSummaryPreamble").addClass("d-none");
				}
			}
  });
}


$("#receiptEmailConsentCheck").on("change", function(){
	if($("#receiptEmailConsentCheck").is(":checked")){
		$("#emailReceiptInputSubmit").prop("disabled", false);
	} else {
		$("#emailReceiptInputSubmit").prop("disabled", true);
	}
})

function updateResponse(outcome, transactionSummary, carbonSummary, member, transaction_id) {

	getCategories("");

	if(!transaction_id){
		transaction_id = "{{murakamiTransactionId}}"
	}

	$("#receiptEmailConsentCheck").prop("checked", false)
	$("#emailReceiptInputSubmit").prop("disabled", true);

	if(outcome == "success"){
		$("#transactionSuccessModal").modal("show");


		$("#transactionSuccessSummary").html(transactionSummary)
		$("#transactionSuccessCarbon").html(carbonSummary)
		$("#printReceiptButton").attr("href", "{{public_address}}/till/receipt/print/" + transaction_id);
		$("#emailReceiptInputWrapper").addClass("d-none");

		if((Object.keys(member).length === 0 && member.constructor === Object) || member == null){
			$("#emailReceiptButton").off('click').on("click", function(){
				$("#emailReceiptInputWrapper").removeClass("d-none");
			});

			$("#emailReceiptInputSubmit").off('click').on("click", function(){
				$("#emailReceiptInputSubmit").prop("disabled", true);
				sendEmailReceipt(transaction_id, null);
			})

		} else {
			if(member.member_id == ""){
				$("#emailReceiptButton").off('click').on("click", function(){
					$("#emailReceiptInputWrapper").removeClass("d-none");
				});

				$("#emailReceiptInputSubmit").off('click').on("click", function(){
					$("#emailReceiptInputSubmit").prop("disabled", true);
					sendEmailReceipt(transaction_id, null);
				})
			} else {

				$("#emailReceiptButton").off('click').on("click", function(){
					$("#emailReceiptButton").prop("disabled", true)
					sendEmailReceipt(transaction_id, member.member_id);
				})
			}

		}

		if(member.member_id) {
			$.get("{{public_address}}/api/get/members/carbon-saved/" + member.member_id, function( response ) {
				$("#transactionSuccessCarbon").html($("#transactionSuccessCarbon").html() + ", totalling " + response.carbon + "kg saved over entire membership!")
			});
		} else {
			$("#transactionSuccessCarbon").html($("#transactionSuccessCarbon").html() + "!")
		}
	} else {
		$("#transactionFailModal").modal("show");
		$("#transactionFailSummary").html(transactionSummary)
	}
}

function sendEmailReceipt(transaction_id, member_id){
	$.ajax({
			type: "POST",
			url: "{{public_address}}/till/receipt/email/",
			data :{
				transaction_id: transaction_id || null,
				member_id: member_id || null,
				email: $("#emailReceiptInput").val() || null
			},
			success: function(response){
				$("#emailReceiptButton").prop("disabled", false);
				$("#emailReceiptInputSubmit").prop("disabled", false);

				if(response.status == "ok"){
					alert("Receipt sent!");
				} else {
					if(member_id){
						alert("Email bounced - please enter email address manually");
						$("#emailReceiptInputWrapper").removeClass("d-none");
						$("#emailReceiptInputSubmit").off('click').on("click", function(){
							sendEmailReceipt(transaction_id, null);
						})
					} else {
						alert("Email bounced - please check email address was entered correctly");
					}
				}
			}
	});
}

function getSavedCarbon(){
	$.ajax({
	    type: "GET",
	    url: "{{public_address}}/api/get/members/carbon-saved/" + $("#member_id").val(),
	    success: function(response){
			$('#carbon').html(response.carbon);
	    }
	});
}

function getBalance(){
	$.ajax({
	    type: "GET",
	    url: "{{public_address}}/api/get/members/balance/" + $("#member_id").val(),
	    success: function(response){
			$('#balance').html(response.balance);
	    }
	});
}

function toggleIsMember(e) {
  if(e.checked) {
      $("#memberOptions").removeClass("d-none");
      searchMember(function(){});
  } else {
    member = {};
    $("#searchResults").html("");
    $("memberInput").val("");
    $("#memberStatement").html("");
    $("#memberOptions").addClass("d-none");
    updateTransactionList();
    updateButtons();
  }
}

$("#memberToggle").change(function() {
  toggleIsMember(this);
});

$("#confirmTransaction").change(function() {
    if(this.checked) {
        $("#confirmTransactionBtn").prop("disabled", false);
    } else {
    	$("#confirmTransactionBtn").prop("disabled", true);
    }
});



function selectPaymentMethod(method){
	$("#cashOption").removeClass("member-selected");
	$("#cardOption").removeClass("member-selected");
	$("#changeCalc").addClass("d-none");
	paymentMethod = null;

	if(method == "cash"){
		$("#cashOption").addClass("member-selected");
		$("#changeCalc").removeClass("d-none");
		paymentMethod = method;
	} else if(method == "card") {
		$("#cardOption").addClass("member-selected");
		paymentMethod = method;
	}
}

{{#if member_id}}
$(document).ready(function(){
	$("#memberToggle").prop("checked", true)
  toggleIsMember({checked: true})
  $("#memberInput").val("{{member_id}}")
  searchMember(function(){
    selectMember(0)
  });
})


{{/if}}

{{#if presetTransaction}}

  {{#each presetTransaction}}

    addToTransaction({{{json this}}})
  {{/each}}

{{/if}}

$(window).load(function() {
	{{#if sumupCallback}}
		{{#ifCond smpStatus '==' 'failed'}}
			updateResponse("fail", "Error code: {{smpMsg}}")
		{{else}}
			{{#ifCond murakamiStatus '==' 'ok'}}
				{{#if transactionSummary}}
					{{#if carbonSummary}}
							updateResponse("success", "{{escape transactionSummary}}", "{{escape carbonSummary}}", { member_id: "{{member_id}}" })
							updateReceipt("{{murakamiTransactionId}}");
					{{/if}}
				{{/if}}
			{{else}}
				{{#if transactionSummary}}
						updateResponse("fail", "{{escape transactionSummary}}")
				{{/if}}
			{{/ifCond}}
		{{/ifCond}}
	{{/if}}
})


</script>
